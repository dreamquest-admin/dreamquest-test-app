name: Production Deployment

on:
  push:
    branches: [ main ]

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    # Docker Hub Authentication
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/dreamquest-test-app:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/dreamquest-test-app:${{ github.sha }}
          
    - name: Install dependencies
      run: sudo apt-get update && sudo apt-get install -y jq
      
    - name: Deploy to Portainer
      run: |
        # Encode compose file
        COMPOSE_CONTENT=$(jq -Rs . < docker-compose.prod.yml | cut -c 2- | rev | cut -c 2- | rev)
        
        # Prepare payload
        PAYLOAD=$(cat <<EOF
        {
          "name": "dreamquest-test",
          "stackFileContent": "$COMPOSE_CONTENT",
          "env": [
            {"name": "TAG", "value": "${{ github.sha }}"},
            {"name": "DB_HOST", "value": "postgres"},
            {"name": "DB_NAME", "value": "${{ secrets.DB_NAME }}"},
            {"name": "DB_USER", "value": "${{ secrets.DB_USER }}"},
            {"name": "DB_PASSWORD", "value": "${{ secrets.DB_PASSWORD }}"}
          ],
          "prune": true,
          "pullImage": true
        }
        EOF
        )
        
        # Create/update stack
        curl -X POST "${{ secrets.PORTAINER_URL }}/api/stacks?method=repository&type=2&endpointId=${{ secrets.PORTAINER_ENDPOINT_ID }}" \
          -H "X-API-Key: ${{ secrets.PORTAINER_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d "$PAYLOAD"
